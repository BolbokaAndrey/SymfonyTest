{% extends 'base.html.twig' %}

{% block title %}–ê–¥–º–∏–Ω–∫–∞ ‚Äî {{ title }}{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('assets/admin.css') }}">
    <style>
        .properties-list {
            background: var(--card-bg);
            border-radius: 12px;
            overflow: hidden;
            border: 1px solid var(--border-color);
        }

        .property-item {
            display: flex;
            align-items: center;
            padding: 16px 20px;
            border-bottom: 1px solid var(--border-color);
            transition: background-color 0.2s;
        }

        .property-item:last-child {
            border-bottom: none;
        }

        .property-item:hover {
            background: rgba(255,255,255,0.02);
        }

        .property-info {
            flex: 1;
        }

        .property-name {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 4px;
        }

        .property-meta {
            font-size: 12px;
            color: var(--text-secondary);
        }

        .property-actions {
            display: flex;
            gap: 8px;
        }

        .btn {
            padding: 6px 12px;
            border: none;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 4px;
            transition: all 0.2s;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-secondary {
            background: var(--secondary-bg);
            color: var(--text-primary);
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
        }

        .btn:hover {
            opacity: 0.8;
        }

        .status-badge {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: 500;
            text-transform: uppercase;
        }

        .status-active {
            background: var(--success-color);
            color: white;
        }

        .status-inactive {
            background: var(--danger-color);
            color: white;
        }

        .property-type {
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 10px;
            font-weight: 500;
            background: var(--secondary-bg);
            color: var(--text-secondary);
        }

        .sort-handle {
            cursor: grab;
            margin-right: 12px;
            color: var(--text-secondary);
            font-size: 16px;
        }

        .sort-handle:active {
            cursor: grabbing;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="layout">
        {% include 'admin/components/sidebar.html.twig' %}
        <main class="content">
            {% embed 'admin/components/header.html.twig' %}
                {% block header_actions %}
                    <a href="{{ path('admin_properties_new') }}" class="btn btn-primary">
                        <span>‚ûï</span> –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ
                    </a>
                {% endblock %}
            {% endembed %}

            {% for message in app.flashes('success') %}
                <div style="background: var(--success-color); color: white; padding: 12px; border-radius: 6px; margin-bottom: 20px;">
                    {{ message }}
                </div>
            {% endfor %}

            {% for message in app.flashes('error') %}
                <div style="background: var(--danger-color); color: white; padding: 12px; border-radius: 6px; margin-bottom: 20px;">
                    {{ message }}
                </div>
            {% endfor %}

            <div class="card">
                {% if propertyDefinitions is empty %}
                    <div style="text-align: center; padding: 40px; color: var(--muted);">
                        <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤</p>
                        <a href="{{ path('admin_properties_new') }}" class="btn btn-primary" style="margin-top: 20px;">–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ</a>
                    </div>
                {% else %}
                    <form id="reorder-form" method="POST" action="{{ path('admin_properties_reorder') }}">
                        <div class="properties-list">
                            {% for propertyDefinition in propertyDefinitions %}
                                <div class="property-item" data-id="{{ propertyDefinition.id }}">
                                    <div class="sort-handle">‚ãÆ‚ãÆ</div>
                                    <div class="property-info">
                                        <div class="property-name">
                                            {{ propertyDefinition.name }}
                                            {% if not propertyDefinition.active %}
                                                <span class="status-badge status-inactive">–í—ã–∫–ª—é—á–µ–Ω–æ</span>
                                            {% endif %}
                                        </div>
                                        <div class="property-meta">
                                            <span class="property-type">{{ propertyDefinition.type }}</span>
                                            {% if propertyDefinition.required %}‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ{% endif %}
                                            {% if propertyDefinition.multiple %}‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ{% endif %}
                                            {% if propertyDefinition.description %}‚Ä¢ {{ propertyDefinition.description }}{% endif %}
                                        </div>
                                    </div>
                                    <div class="property-actions">
                                        <a href="{{ path('admin_properties_edit', {'id': propertyDefinition.id}) }}" class="btn btn-secondary">
                                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                        </a>
                                        <form method="POST" action="{{ path('admin_properties_toggle', {'id': propertyDefinition.id}) }}" style="display: inline;">
                                            <button type="submit" class="btn {{ propertyDefinition.active ? 'btn-danger' : 'btn-primary' }}">
                                                {{ propertyDefinition.active ? 'üö´ –í—ã–∫–ª—é—á–∏—Ç—å' : '‚úÖ –í–∫–ª—é—á–∏—Ç—å' }}
                                            </button>
                                        </form>
                                        <form method="POST" action="{{ path('admin_properties_delete', {'id': propertyDefinition.id}) }}" style="display: inline;"
                                              onsubmit="return confirm('–£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ &quot;{{ propertyDefinition.name }}&quot;?')">
                                            <button type="submit" class="btn btn-danger">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                                        </form>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                        <input type="hidden" name="order" id="order-input">
                        <div style="padding: 20px; text-align: center;">
                            <button type="submit" class="btn btn-primary">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫</button>
                        </div>
                    </form>
                {% endif %}
            </div>
        </main>
    </div>

    <script>
        // Drag and drop sorting
        const container = document.querySelector('.properties-list');
        const items = container.querySelectorAll('.property-item');
        const orderInput = document.getElementById('order-input');

        let draggedItem = null;

        items.forEach(item => {
            item.draggable = true;

            item.addEventListener('dragstart', (e) => {
                draggedItem = item;
                item.style.opacity = '0.5';
            });

            item.addEventListener('dragend', (e) => {
                draggedItem = null;
                item.style.opacity = '1';
            });

            item.addEventListener('dragover', (e) => {
                e.preventDefault();
            });

            item.addEventListener('drop', (e) => {
                e.preventDefault();
                if (draggedItem && draggedItem !== item) {
                    const allItems = Array.from(container.querySelectorAll('.property-item'));
                    const draggedIndex = allItems.indexOf(draggedItem);
                    const targetIndex = allItems.indexOf(item);

                    if (draggedIndex < targetIndex) {
                        container.insertBefore(draggedItem, item.nextSibling);
                    } else {
                        container.insertBefore(draggedItem, item);
                    }

                    updateOrder();
                }
            });
        });

        function updateOrder() {
            const allItems = Array.from(container.querySelectorAll('.property-item'));
            const order = {};
            allItems.forEach((item, index) => {
                order[item.dataset.id] = index + 1;
            });
            orderInput.value = JSON.stringify(order);
        }

        // Initial order
        updateOrder();
    </script>
{% endblock %}
